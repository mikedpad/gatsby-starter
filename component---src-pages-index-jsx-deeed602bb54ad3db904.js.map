{"version":3,"sources":["webpack://gatsby-starter/./node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://gatsby-starter/./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/commaLists/commaLists.js","webpack://gatsby-starter/./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://gatsby-starter/./node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://gatsby-starter/./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/html/html.js","webpack://gatsby-starter/./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://gatsby-starter/./node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLine/oneLine.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://gatsby-starter/./node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://gatsby-starter/./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://gatsby-starter/./node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://gatsby-starter/./node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://gatsby-starter/../src/image-utils.ts","webpack://gatsby-starter/../src/components/hooks.ts","webpack://gatsby-starter/../src/components/layout-wrapper.tsx","webpack://gatsby-starter/../src/components/picture.tsx","webpack://gatsby-starter/../src/components/placeholder.tsx","webpack://gatsby-starter/../src/components/main-image.tsx","webpack://gatsby-starter/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter/../src/components/static-image.server.tsx","webpack://gatsby-starter/../src/components/static-image.tsx","webpack://gatsby-starter/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://gatsby-starter/./src/components/TestElements/TableOfContents.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/TestSection.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/BackToTop.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/TestElement.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Headings.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Paragraphs.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Blockquotes.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Lists.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/HorizontalRule.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Tables.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Code.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/Inline.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Text/index.js","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Images.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Audio.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Video.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Canvas.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Meter.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/Progress.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/InlineSVG.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/IFrame.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Embedded/index.js","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/FormElement.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/InputFields.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/SelectMenu.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/Checkboxes.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/RadioButtons.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/TextArea.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/HTML5Inputs.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/ActionButtons.jsx","webpack://gatsby-starter/./src/components/TestElements/Elements/Form/index.js","webpack://gatsby-starter/./src/pages/index.jsx"],"names":["strings","raw","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","value","_classCallCheck","instance","TypeError","TemplateTag","_this","this","_len","arguments","transformers","Array","_key","tag","_len2","expressions","_key2","interimTag","bind","transformEndResult","map","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","match","join","separatorIndex","lastIndexOf","slice","_toConsumableArray","arr","arr2","from","type","Math","min","el","regexp","RegExp","replace","Error","side","trim","toLowerCase","splitBy","includes","split","isValidValue","x","Number","isNaN","filter","replaceWhat","replaceWith","toString","height","imageCache","Set","hasNativeLazyLoadSupport","HTMLImageElement","gatsbyImageIsInstalled","GATSBY___IMAGE","storeImageloaded","cacheKey","add","hasImageLoaded","has","format","getMainProps","isLoading","isLoaded","images","loading","toggleLoaded","ref","style","current","document","documentElement","dataset","objectFit","objectPosition","window","objectFitPolyfill","import","e","left","position","top","transition","width","willChange","shouldLoad","data-main-image","opacity","onLoad","currentTarget","img","Image","src","currentSrc","decode","then","getPlaceholderProps","placeholder","layout","backgroundColor","wrapperStyle","bottom","right","result","aria-hidden","data-placeholder-image","Sizer","React","paddingTop","maxWidth","display","alt","role","LayoutWrapper","children","Fragment","srcSet","innerRef","decoding","Picture","forwardRef","fallback","sources","sizes","fallbackImage","media","propTypes","PropTypes","displayName","Placeholder","propName","componentName","MainImage","altValidator","image","GatsbyImageHydrator","_this2","createRef","state","_lazyHydrate","hasSSRHtml","root","querySelector","hydrated","Promise","resolve","_this3","lazyHydrator","lazyHydrate","toggleIsLoaded","setState","forceRender","_setupIntersectionObserver","useCache","intersectionObserver","createIntersectionObserver","_this4","JSON","stringify","onStartLoad","wasCached","unobserveRef","shouldComponentUpdate","nextProps","nextState","hasChanged","render","_this5","componentDidMount","ssrElement","complete","addEventListener","removeEventListener","componentWillUnmount","Type","as","className","overflow","data-gatsby-image-wrapper","wStyle","wClass","wrapperProps","sizer","dangerouslySetInnerHTML","__html","suppressHydrationWarning","Component","GatsbyImage","warn","console","error","propsKey","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","imageData","__imageData","__error","camelCase","input","options","assign","pascalCase","toUpperCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","preserveCamelCase","_","p1","m","charAt","module","exports","default","Nav","styled","UnorderedList","child","ListItem","colors","TocLink","scrollToElement","evt","preventDefault","getElementById","hash","scrollIntoView","behavior","inline","mapTableOfContents","node","label","href","onClick","toc","Title","id","title","GoToTopButton","event","block","Article","PreCode","cite","dateTime","data","useStaticQuery","G","cat1","childImageSharp","gatsbyImageData","cat2","cat3","controls","kind","max","cx","cy","r","fill","Fieldset","Legend","htmlFor","name","defaultChecked","rows","cols","defaultValue","disabled","PageHeadline","Layout","Form","Link","to"],"mappings":"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","file":"component---src-pages-index-jsx-deeed602bb54ad3db904.js","sourcesContent":["var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\n\n\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      } // else, return a transformed end result of processing the template with our tag\n\n\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    }; // if first argument is an array, extrude it as a list of transformers\n\n\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    } // if any transformers are functions, this means they are not initiated - automatically initiate them\n\n\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    }); // return an ES2015 template tag\n\n    return this.tag;\n  }\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n\n      return this.transformers.reduce(cb, str);\n    }\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n\n      return this.transformers.reduce(cb, substitution);\n    }\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;","function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsOr;","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      } // Do not touch if null or undefined\n\n\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default html;","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\nexport default safeHtml;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\nexport default oneLine;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\nexport default oneLineTrim;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsOr;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default inlineLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineInlineLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\nexport default stripIndent;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\nexport default stripIndents;","/* eslint-disable no-unused-expressions */\nimport { stripIndent } from \"common-tags\"\nimport camelCase from \"camelcase\"\nimport { IGatsbyImageData } from \".\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320,\n  654,\n  768,\n  1024,\n  1366,\n  1600,\n  1920,\n  2048,\n  2560,\n  3440,\n  3840,\n  4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.substr(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(stripIndent`\n    The requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* eslint-disable no-unused-expressions */\nimport {\n  useState,\n  CSSProperties,\n  useEffect,\n  HTMLAttributes,\n  ImgHTMLAttributes,\n  ReactEventHandler,\n  SetStateAction,\n  Dispatch,\n  RefObject,\n} from \"react\"\nimport { Node } from \"gatsby\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport {\n  IGatsbyImageHelperArgs,\n  generateImageData,\n  Layout,\n  EVERY_BREAKPOINT,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\nconst imageCache = new Set<string>()\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport function storeImageloaded(cacheKey?: string): void {\n  if (cacheKey) {\n    imageCache.add(cacheKey)\n  }\n}\n\nexport function hasImageLoaded(cacheKey: string): boolean {\n  return imageCache.has(cacheKey)\n}\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\ntype ImageDataLike = FileNode | IGatsbyImageDataParent | IGatsbyImageData\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport async function applyPolyfill(\n  ref: RefObject<HTMLImageElement>\n): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(ref.current)\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  toggleLoaded?: (loaded: boolean) => void,\n  cacheKey?: string,\n  ref?: RefObject<HTMLImageElement>,\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  const onLoad: ReactEventHandler<HTMLImageElement> = function (e) {\n    if (isLoaded) {\n      return\n    }\n\n    storeImageloaded(cacheKey)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .catch(() => {\n          // ignore error, we just go forward\n        })\n        .then(() => {\n          toggleLoaded(true)\n        })\n    } else {\n      toggleLoaded(true)\n    }\n  }\n\n  // Polyfill \"object-fit\" if unsupported (mostly IE)\n  if (ref?.current && !(`objectFit` in document.documentElement.style)) {\n    ref.current.dataset.objectFit = style.objectFit ?? `cover`\n    ref.current.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n    applyPolyfill(ref)\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n    onLoad,\n    ref,\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport function useImageLoaded(\n  cacheKey: string,\n  loading: \"lazy\" | \"eager\",\n  ref: any\n): {\n  isLoaded: boolean\n  isLoading: boolean\n  toggleLoaded: Dispatch<SetStateAction<boolean>>\n} {\n  const [isLoaded, toggleLoaded] = useState(false)\n  const [isLoading, toggleIsLoading] = useState(loading === `eager`)\n\n  const rAF =\n    typeof window !== `undefined` && `requestAnimationFrame` in window\n      ? requestAnimationFrame\n      : function (cb: TimerHandler): number {\n          return setTimeout(cb, 16)\n        }\n  const cRAF =\n    typeof window !== `undefined` && `cancelAnimationFrame` in window\n      ? cancelAnimationFrame\n      : clearTimeout\n\n  useEffect(() => {\n    let interval: number\n    // @see https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback/50019873#50019873\n    function toggleIfRefExists(): void {\n      if (ref.current) {\n        if (loading === `eager` && ref.current.complete) {\n          storeImageloaded(cacheKey)\n          toggleLoaded(true)\n        } else {\n          toggleIsLoading(true)\n        }\n      } else {\n        interval = rAF(toggleIfRefExists)\n      }\n    }\n    toggleIfRefExists()\n\n    return (): void => {\n      cRAF(interval)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    isLoaded,\n    toggleLoaded,\n  }\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer: string | null = null\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> = function LayoutWrapper({\n  children,\n  ...props\n}) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {\n        // eslint-disable-next-line no-undef\n        SERVER && <NativeScriptLoading />\n      }\n    </Fragment>\n  )\n}\n","/* eslint-disable filenames/match-regex */\nimport React, {\n  FunctionComponent,\n  ImgHTMLAttributes,\n  forwardRef,\n  LegacyRef,\n} from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n  innerRef: LegacyRef<HTMLImageElement>\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  innerRef,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n      ref={innerRef}\n    />\n  )\n}\n\nexport const Picture = forwardRef<HTMLImageElement, PictureProps>(\n  function Picture(\n    { fallback, sources = [], shouldLoad = true, ...props },\n    ref\n  ) {\n    const sizes = props.sizes || fallback?.sizes\n    const fallbackImage = (\n      <Image\n        {...props}\n        {...fallback}\n        sizes={sizes}\n        shouldLoad={shouldLoad}\n        innerRef={ref}\n      />\n    )\n\n    if (!sources.length) {\n      return fallbackImage\n    }\n\n    return (\n      <picture>\n        {sources.map(({ media, srcSet, type }) => (\n          <source\n            key={`${media}-${type}-${srcSet}`}\n            type={type}\n            media={media}\n            srcSet={shouldLoad ? srcSet : undefined}\n            data-srcset={!shouldLoad ? srcSet : undefined}\n            sizes={sizes}\n          />\n        ))}\n        {fallbackImage}\n      </picture>\n    )\n  }\n)\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> = function Placeholder({\n  fallback,\n  ...props\n}) {\n  if (fallback) {\n    return (\n      <Picture\n        {...props}\n        fallback={{\n          src: fallback,\n        }}\n        aria-hidden\n        alt=\"\"\n      />\n    )\n  } else {\n    return <div {...props}></div>\n  }\n}\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { forwardRef } from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage = forwardRef<HTMLImageElement, MainImageProps>(\n  function MainImage(props, ref) {\n    return (\n      <>\n        <Picture ref={ref} {...props} />\n        <noscript>\n          <Picture {...props} shouldLoad={true} />\n        </noscript>\n      </>\n    )\n  }\n)\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, {\n  ElementType,\n  FunctionComponent,\n  CSSProperties,\n  WeakValidationMap,\n} from \"react\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImageHydrator: FunctionComponent<{\n  as?: ElementType\n  style?: CSSProperties\n  className?: string\n}> = function GatsbyImageHydrator({ as: Type = `div`, children, ...props }) {\n  return <Type {...props}>{children}</Type>\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage({\n  as,\n  className,\n  class: preactClass,\n  style,\n  image,\n  loading = `lazy`,\n  imgClassName,\n  imgStyle,\n  backgroundColor,\n  objectFit,\n  objectPosition,\n  ...props\n}) {\n  if (!image) {\n    console.warn(`[gatsby-plugin-image] Missing image prop`)\n    return null\n  }\n  if (preactClass) {\n    className = preactClass\n  }\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: placeholderBackgroundColor,\n  } = image\n\n  const { style: wStyle, className: wClass, ...wrapperProps } = getWrapperProps(\n    width,\n    height,\n    layout\n  )\n\n  const cleanedImages: IGatsbyImageData[\"images\"] = {\n    fallback: undefined,\n    sources: [],\n  }\n  if (images.fallback) {\n    cleanedImages.fallback = {\n      ...images.fallback,\n      srcSet: images.fallback.srcSet\n        ? removeNewLines(images.fallback.srcSet)\n        : undefined,\n    }\n  }\n\n  if (images.sources) {\n    cleanedImages.sources = images.sources.map(source => {\n      return {\n        ...source,\n        srcSet: removeNewLines(source.srcSet),\n      }\n    })\n  }\n\n  return (\n    <GatsbyImageHydrator\n      {...wrapperProps}\n      as={as}\n      style={{\n        ...wStyle,\n        ...style,\n        backgroundColor,\n      }}\n      className={`${wClass}${className ? ` ${className}` : ``}`}\n    >\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            undefined,\n            undefined,\n            undefined,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    </GatsbyImageHydrator>\n  )\n}\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","/* eslint-disable no-unused-expressions */\nimport React, {\n  Component,\n  ElementType,\n  createRef,\n  MutableRefObject,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  RefObject,\n  CSSProperties,\n} from \"react\"\nimport {\n  getWrapperProps,\n  hasNativeLazyLoadSupport,\n  storeImageloaded,\n  hasImageLoaded,\n  gatsbyImageIsInstalled,\n} from \"./hooks\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport { Layout } from \"../image-utils\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport { Unobserver } from \"./intersection-observer\"\nimport { render } from \"react-dom\"\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: () => void\n  onError?: () => void\n  onStartLoad?: (props: { wasCached?: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nclass GatsbyImageHydrator extends Component<\n  GatsbyImageProps,\n  { isLoading: boolean; isLoaded: boolean }\n> {\n  root: RefObject<HTMLImageElement | undefined> = createRef<\n    HTMLImageElement | undefined\n  >()\n  hydrated: MutableRefObject<boolean> = { current: false }\n  forceRender: MutableRefObject<boolean> = {\n    // In dev we use render not hydrate, to avoid hydration warnings\n    current: process.env.NODE_ENV === `development`,\n  }\n  lazyHydrator: () => void | null = null\n  ref = createRef<HTMLImageElement>()\n  unobserveRef: Unobserver\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: hasNativeLazyLoadSupport(),\n      isLoaded: false,\n    }\n  }\n\n  _lazyHydrate(props, state): Promise<void> {\n    const hasSSRHtml = this.root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    )\n    // On first server hydration do nothing\n    if (hasNativeLazyLoadSupport() && hasSSRHtml && !this.hydrated.current) {\n      this.hydrated.current = true\n      return Promise.resolve()\n    }\n\n    return import(`./lazy-hydrate`).then(({ lazyHydrate }) => {\n      this.lazyHydrator = lazyHydrate(\n        {\n          image: props.image.images,\n          isLoading: state.isLoading,\n          isLoaded: state.isLoaded,\n          toggleIsLoaded: () => {\n            props.onLoad?.()\n\n            this.setState({\n              isLoaded: true,\n            })\n          },\n          ref: this.ref,\n          ...props,\n        },\n        this.root,\n        this.hydrated,\n        this.forceRender\n      )\n    })\n  }\n\n  /**\n   * Choose if setupIntersectionObserver should use the image cache or not.\n   */\n  _setupIntersectionObserver(useCache = true): void {\n    import(`./intersection-observer`).then(({ createIntersectionObserver }) => {\n      const intersectionObserver = createIntersectionObserver(() => {\n        if (this.root.current) {\n          const cacheKey = JSON.stringify(this.props.image.images)\n          this.props.onStartLoad?.({\n            wasCached: useCache && hasImageLoaded(cacheKey),\n          })\n          this.setState({\n            isLoading: true,\n            isLoaded: useCache && hasImageLoaded(cacheKey),\n          })\n        }\n      })\n\n      if (this.root.current) {\n        this.unobserveRef = intersectionObserver(this.root)\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState): boolean {\n    let hasChanged = false\n    if (!this.state.isLoading && nextState.isLoading && !nextState.isLoaded) {\n      // Props have changed between SSR and hydration, so we need to force render instead of hydrate\n      this.forceRender.current = true\n    }\n    // this check mostly means people do not have the correct ref checks in place, we want to reset some state to suppport loading effects\n    if (this.props.image.images !== nextProps.image.images) {\n      // reset state, we'll rely on intersection observer to reload\n      if (this.unobserveRef) {\n        // unregister intersectionObserver\n        this.unobserveRef()\n\n        // // on unmount, make sure we cleanup\n        if (this.hydrated.current && this.lazyHydrator) {\n          render(null, this.root.current)\n        }\n      }\n\n      this.setState(\n        {\n          isLoading: false,\n          isLoaded: false,\n        },\n        () => {\n          this._setupIntersectionObserver(false)\n        }\n      )\n\n      hasChanged = true\n    }\n\n    if (this.root.current && !hasChanged) {\n      this._lazyHydrate(nextProps, nextState)\n    }\n\n    return false\n  }\n\n  componentDidMount(): void {\n    if (this.root.current) {\n      const ssrElement = this.root.current.querySelector(\n        `[data-gatsby-image-ssr]`\n      ) as HTMLImageElement\n      const cacheKey = JSON.stringify(this.props.image.images)\n\n      // when SSR and native lazyload is supported we'll do nothing ;)\n      if (\n        hasNativeLazyLoadSupport() &&\n        ssrElement &&\n        gatsbyImageIsInstalled()\n      ) {\n        this.props.onStartLoad?.({ wasCached: false })\n\n        // When the image is already loaded before we have hydrated, we trigger onLoad and cache the item\n        if (ssrElement.complete) {\n          this.props.onLoad?.()\n          storeImageloaded(cacheKey)\n        } else {\n          // We need the current class context (this) inside our named onLoad function\n          // The named function is necessary to easily remove the listener afterward.\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const _this = this\n          // add an onLoad to the image\n          ssrElement.addEventListener(`load`, function onLoad() {\n            ssrElement.removeEventListener(`load`, onLoad)\n\n            _this.props.onLoad?.()\n            storeImageloaded(cacheKey)\n          })\n        }\n\n        return\n      }\n\n      // Fallback to custom lazy loading (intersection observer)\n      this._setupIntersectionObserver(true)\n    }\n  }\n\n  componentWillUnmount(): void {\n    // Cleanup when onmount happens\n    if (this.unobserveRef) {\n      // unregister intersectionObserver\n      this.unobserveRef()\n\n      // on unmount, make sure we cleanup\n      if (this.hydrated.current && this.lazyHydrator) {\n        this.lazyHydrator()\n      }\n    }\n\n    return\n  }\n\n  render(): JSX.Element {\n    const Type = this.props.as || `div`\n    const { width, height, layout } = this.props.image\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    let className = this.props.className\n    // preact class\n    if (this.props.class) {\n      className = this.props.class\n    }\n\n    const sizer = getSizer(layout, width, height)\n\n    return (\n      <Type\n        {...wrapperProps}\n        style={{\n          ...wStyle,\n          ...this.props.style,\n          backgroundColor: this.props.backgroundColor,\n        }}\n        className={`${wClass}${className ? ` ${className}` : ``}`}\n        ref={this.root}\n        dangerouslySetInnerHTML={{\n          __html: sizer,\n        }}\n        suppressHydrationWarning\n      />\n    )\n  }\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage(\n  props\n) {\n  if (!props.image) {\n    if (process.env.NODE_ENV === `development`) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n    }\n    return null\n  }\n\n  if (!gatsbyImageIsInstalled()) {\n    console.error(\n      `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n    )\n  }\n  const { className, class: classSafe, backgroundColor, image } = props\n  const { width, height, layout } = image\n  const propsKey = JSON.stringify([\n    width,\n    height,\n    layout,\n    className,\n    classSafe,\n    backgroundColor,\n  ])\n  return <GatsbyImageHydrator key={propsKey} {...props} />\n}\n\nGatsbyImage.propTypes = propTypes\n\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import React from 'react';\nimport styled from 'styled-components';\nimport media from 'styled-media-query';\nimport colors from '../../styles/colors';\nimport toc from './toc.json';\n\nconst Nav = styled.nav`\n  margin: 3rem 0;\n`;\n\nconst UnorderedList = styled.ul`\n  justify-content: space-around;\n  list-style-type: none;\n  margin: ${props => (props.child ? `0 0 2rem` : `0`)};\n  padding: 0;\n  text-align: center;\n\n  ${media.greaterThan(`small`)`\n    display: ${props => (props.child ? `block` : `flex`)};\n    list-style-type: ${props => (props.child ? `square` : `none`)};\n    margin: 0;\n    text-align: left;\n  `};\n`;\n\nconst ListItem = styled.li`\n  display: block;\n\n  ${UnorderedList} li & {\n    color: ${colors.fg.darker};\n    display: list-item;\n\n    ${media.greaterThan(`560px`)`\n      margin: 0 0 0 2.5rem;\n    `};\n\n    &:hover {\n      color: ${colors.fg.dark};\n    }\n  }\n`;\n\nconst TocLink = styled.a`\n  color: ${colors.links.default};\n  display: block;\n  font-size: 1.25rem;\n  padding: 0.5em 0.7em;\n  text-decoration: none;\n  transition: background-color 0.2s ease-out;\n\n  &:hover {\n    color: ${colors.links.active};\n    background-color: ${colors.bg.light};\n  }\n\n  ${ListItem} ${ListItem} & {\n    font-size: 1rem;\n  }\n`;\n\nconst scrollToElement = evt => {\n  evt.preventDefault();\n  document.getElementById(evt.target.hash.slice(1)).scrollIntoView({\n    behavior: `smooth`,\n    inline: `start`,\n  });\n};\n\nconst mapTableOfContents = node => {\n  const { label, href, child } = node;\n  return (\n    <ListItem key={label}>\n      <TocLink href={href} onClick={scrollToElement}>\n        {label}\n      </TocLink>\n      {child && <UnorderedList child>{child.map(mapTableOfContents)}</UnorderedList>}\n    </ListItem>\n  );\n};\n\nconst TableOfContents = () => (\n  <Nav>\n    <UnorderedList>{toc.map(mapTableOfContents)}</UnorderedList>\n  </Nav>\n);\n\nexport default TableOfContents;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport colors from '../../../styles/colors';\n\nconst Title = styled.h1`\n  background-color: ${colors.bg.light};\n  color: #fff;\n  font-size: 3rem;\n  padding: 1rem 2rem;\n`;\n\nconst TestSection = ({ id, title, children }) => (\n  <section id={id}>\n    <header>\n      <Title>{title}</Title>\n    </header>\n    {children}\n  </section>\n);\n\nexport default TestSection;\n\nTestSection.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst GoToTopButton = styled.button`\n  background-color: #ffffff33;\n  border: 2px solid #ffffff11;\n  border-radius: 0.25em;\n  color: #fff;\n  margin: 1.5rem 0 3rem;\n  outline: none;\n  padding: 0.25em 0.75em;\n`;\n\nconst BackToTop = () => {\n  const onScrollToTopClick = event => {\n    event.preventDefault();\n    document.documentElement.scrollIntoView({\n      behavior: `smooth`,\n      block: `start`,\n      inline: `start`,\n    });\n  };\n\n  return (\n    <GoToTopButton type=\"button\" onClick={onScrollToTopClick}>\n      Go To Top\n    </GoToTopButton>\n  );\n};\n\nexport default BackToTop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport colors from '../../../styles/colors';\nimport BackToTop from './BackToTop';\n\nconst Article = styled.article`\n  padding: 1rem 2rem;\n`;\n\nconst Title = styled.h1`\n  border-bottom: 1px solid ${colors.fg.default};\n  color: #fff;\n  margin-bottom: 0.67em;\n  padding-bottom: 0.2em;\n`;\n\nconst TestElement = ({ id, title, children }) => (\n  <Article id={id}>\n    <header>\n      <Title>{title}</Title>\n    </header>\n    <div>{children}</div>\n    <footer>\n      <BackToTop />\n    </footer>\n  </Article>\n);\n\nexport default TestElement;\n\nTestElement.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Headings = () => (\n  <TestElement id=\"text__headings\" title=\"Headings\">\n    <h1>Heading 1</h1>\n    <h2>Heading 2</h2>\n    <h3>Heading 3</h3>\n    <h4>Heading 4</h4>\n    <h5>Heading 5</h5>\n    <h6>Heading 6</h6>\n  </TestElement>\n);\n\nexport default Headings;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Paragraphs = () => (\n  <TestElement id=\"text__paragraphs\" title=\"Paragraphs\">\n    <p>\n      A paragraph (from the Greek paragraphos, “to write beside” or “written beside”) is a\n      self-contained unit of a discourse in writing dealing with a particular point or idea. A\n      paragraph consists of one or more sentences. Though not required by the syntax of any\n      language, paragraphs are usually an expected part of formal writing, used to organize longer\n      prose.\n    </p>\n  </TestElement>\n);\n\nexport default Paragraphs;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Blockquotes = () => {\n  return (\n    <TestElement id=\"text__blockquotes\" title=\"Blockquotes\">\n      <blockquote>\n        <p>\n          A block quotation (also known as a long quotation or extract) is a quotation in a written\n          document, that is set off from the main text as a paragraph, or block of text.\n        </p>\n        <p>\n          It is typically distinguished visually using indentation and a different typeface or\n          smaller size quotation. It may or may not include a citation, usually placed at the\n          bottom.\n        </p>\n        <cite>\n          <a href=\"#!\">Said no one, ever.</a>\n        </cite>\n      </blockquote>\n    </TestElement>\n  );\n};\n\nexport default Blockquotes;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Lists = () => {\n  return (\n    <TestElement id=\"text__lists\" title=\"Lists\">\n      <h2>Definition list</h2>\n      <dl>\n        <dt>Definition List Title</dt>\n        <dd>This is a definition list division.</dd>\n      </dl>\n      <h2>Ordered List</h2>\n      <ol>\n        <li>List Item 1</li>\n        <li>List Item 2</li>\n        <li>List Item 3</li>\n      </ol>\n      <h2>Unordered List</h2>\n      <ul>\n        <li>List Item 1</li>\n        <li>List Item 2</li>\n        <li>List Item 3</li>\n      </ul>\n    </TestElement>\n  );\n};\n\nexport default Lists;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst HorizontalRule = () => {\n  return (\n    <TestElement id=\"text__hr\" title=\"Horizontal Rule\">\n      <hr />\n    </TestElement>\n  );\n};\n\nexport default HorizontalRule;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Tables = () => {\n  return (\n    <TestElement id=\"text__tables\" title=\"Tabular Data\">\n      <table>\n        <caption>Table Caption</caption>\n        <thead>\n          <tr>\n            <th>Table Heading 1</th>\n            <th>Table Heading 2</th>\n            <th>Table Heading 3</th>\n            <th>Table Heading 4</th>\n            <th>Table Heading 5</th>\n          </tr>\n        </thead>\n        <tfoot>\n          <tr>\n            <th>Table Footer 1</th>\n            <th>Table Footer 2</th>\n            <th>Table Footer 3</th>\n            <th>Table Footer 4</th>\n            <th>Table Footer 5</th>\n          </tr>\n        </tfoot>\n        <tbody>\n          <tr>\n            <td>Table Cell 1</td>\n            <td>Table Cell 2</td>\n            <td>Table Cell 3</td>\n            <td>Table Cell 4</td>\n            <td>Table Cell 5</td>\n          </tr>\n          <tr>\n            <td>Table Cell 1</td>\n            <td>Table Cell 2</td>\n            <td>Table Cell 3</td>\n            <td>Table Cell 4</td>\n            <td>Table Cell 5</td>\n          </tr>\n          <tr>\n            <td>Table Cell 1</td>\n            <td>Table Cell 2</td>\n            <td>Table Cell 3</td>\n            <td>Table Cell 4</td>\n            <td>Table Cell 5</td>\n          </tr>\n          <tr>\n            <td>Table Cell 1</td>\n            <td>Table Cell 2</td>\n            <td>Table Cell 3</td>\n            <td>Table Cell 4</td>\n            <td>Table Cell 5</td>\n          </tr>\n        </tbody>\n      </table>\n    </TestElement>\n  );\n};\n\nexport default Tables;\n","import React from 'react';\nimport styled from 'styled-components';\nimport TestElement from '../TestElement';\n\nconst PreCode = styled.pre`\n  overflow-x: scroll;\n`;\n\nconst Code = () => {\n  return (\n    <TestElement id=\"text__code\" title=\"Code\">\n      <p>\n        <strong>Keyboard input:</strong> <kbd>Cmd</kbd>\n      </p>\n      <p>\n        <strong>Inline code:</strong> <code>&lt;div&gt;code&lt;/div&gt;</code>\n      </p>\n      <p>\n        <strong>Sample output:</strong>\n        {` `}\n        <samp>This is sample output from a computer program.</samp>\n      </p>\n      <h2>Pre-formatted text</h2>\n      <PreCode>\n        {`\nP R E F O R M A T T E D T E X T ! ' # $ % & ' ( ) * + ${` `} , - . /\n0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ [ \\\\ ] ^ _ \\`\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\na b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~\n                `}\n      </PreCode>\n    </TestElement>\n  );\n};\n\nexport default Code;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Inline = () => {\n  return (\n    <TestElement id=\"text__inline\" title=\"Inline Elements\">\n      <p>\n        <a href=\"#!\">This is a text link</a>.\n      </p>\n      <p>\n        <strong>Strong is used to indicate strong importance.</strong>\n      </p>\n      <p>\n        <em>This text has added emphasis.</em>\n      </p>\n      <p>\n        The <b>b element</b> is stylistically different text from normal text, without any special\n        importance.\n      </p>\n      <p>\n        The <i>i element</i> is text that is offset from the normal text.\n      </p>\n      <p>\n        The <u>u element</u> is text with an unarticulated, though explicitly rendered, non-textual\n        annotation.\n      </p>\n      <p>\n        <del>This text is deleted</del> and <ins>This text is inserted</ins>.\n      </p>\n      <p>\n        <s>This text has a strikethrough</s>.\n      </p>\n      <p>\n        Superscript<sup>®</sup>.\n      </p>\n      <p>\n        Subscript for things like H<sub>2</sub>O.\n      </p>\n      <p>\n        <small>This small text is small for for fine print, etc.</small>\n      </p>\n      <p>\n        Abbreviation: <abbr title=\"HyperText Markup Language\">HTML</abbr>\n      </p>\n      <p>\n        <q cite=\"https://developer.mozilla.org/en-US/docs/HTML/Element/q\">\n          This text is a short inline quotation.\n        </q>\n      </p>\n      <p>\n        <cite>This is a citation.</cite>\n      </p>\n      <p>\n        The <dfn>dfn element</dfn> indicates a definition.\n      </p>\n      <p>\n        The <mark>mark element</mark> indicates a highlight.\n      </p>\n      <p>\n        The <var>variable element</var>, such as <var>x</var> = <var>y</var>.\n      </p>\n      <p>\n        The time element: <time dateTime=\"2013-04-06T12:32+00:00\">2 weeks ago</time>\n      </p>\n    </TestElement>\n  );\n};\n\nexport default Inline;\n","import React from 'react';\nimport TestSection from '../TestSection';\nimport Headings from './Headings';\nimport Paragraphs from './Paragraphs';\nimport Blockquotes from './Blockquotes';\nimport Lists from './Lists';\nimport HorizontalRule from './HorizontalRule';\nimport Tables from './Tables';\nimport Code from './Code';\nimport Inline from './Inline';\n\nconst Text = () => {\n  return (\n    <TestSection id=\"text\" title=\"Text Elements\">\n      <Headings />\n      <Paragraphs />\n      <Blockquotes />\n      <Lists />\n      <HorizontalRule />\n      <Tables />\n      <Code />\n      <Inline />\n    </TestSection>\n  );\n};\n\nexport default Text;\n","import React from 'react';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport TestElement from '../TestElement';\n\nconst Images = () => {\n  const data = useStaticQuery(graphql`\n    query CatImageQuery {\n      cat1: file(relativePath: { eq: \"cat1.jpg\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, quality: 70)\n        }\n      }\n      cat2: file(relativePath: { eq: \"cat2.jpg\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, quality: 70)\n        }\n      }\n      cat3: file(relativePath: { eq: \"cat3.jpg\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, quality: 70)\n        }\n      }\n    }\n  `);\n\n  return (\n    <TestElement id=\"embedded__images\" title=\"Images\">\n      <h2>\n        No <code>&lt;figure&gt;</code> element\n      </h2>\n      <GatsbyImage image={data.cat1.childImageSharp.gatsbyImageData} alt=\"Cat 1\" />\n      <h2>\n        Wrapped in a <code>&lt;figure&gt;</code> element, no <code>&lt;figcaption&gt;</code>\n      </h2>\n      <figure>\n        <GatsbyImage image={data.cat2.childImageSharp.gatsbyImageData} alt=\"Cat 2\" />\n      </figure>\n      <h2>\n        Wrapped in a <code>&lt;figure&gt;</code> element, with a{` `}\n        <code>&lt;figcaption&gt;</code>\n      </h2>\n      <figure>\n        <GatsbyImage image={data.cat3.childImageSharp.gatsbyImageData} alt=\"Cat 3\" />\n        <figcaption>Here is a caption for this image.</figcaption>\n      </figure>\n    </TestElement>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Audio = () => {\n  return (\n    <TestElement id=\"embedded__audio\" title=\"Audio\">\n      <audio controls=\"\">\n        <track kind=\"captions\" />\n        audio\n      </audio>\n    </TestElement>\n  );\n};\n\nexport default Audio;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Video = () => {\n  return (\n    <TestElement id=\"embedded__video\" title=\"Video\">\n      <video controls=\"\">\n        <track kind=\"captions\" />\n        video\n      </video>\n    </TestElement>\n  );\n};\n\nexport default Video;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Canvas = () => {\n  return (\n    <TestElement id=\"embedded__canvas\" title=\"Canvas\">\n      <canvas>canvas</canvas>\n    </TestElement>\n  );\n};\n\nexport default Canvas;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Meter = () => {\n  return (\n    <TestElement id=\"embedded__meter\" title=\"Meter\">\n      <meter value=\"2\" min=\"0\" max=\"10\">\n        2 out of 10\n      </meter>\n    </TestElement>\n  );\n};\n\nexport default Meter;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst Progress = () => {\n  return (\n    <TestElement id=\"embedded__progress\" title=\"Progress\">\n      <progress>progress</progress>\n    </TestElement>\n  );\n};\n\nexport default Progress;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst InlineSVG = () => {\n  return (\n    <TestElement id=\"embedded__svg\" title=\"Inline SVG\">\n      <svg width=\"100px\" height=\"100px\">\n        <circle cx=\"100\" cy=\"100\" r=\"100\" fill=\"#1fa3ec\" />\n      </svg>\n    </TestElement>\n  );\n};\n\nexport default InlineSVG;\n","import React from 'react';\nimport TestElement from '../TestElement';\n\nconst IFrame = () => {\n  return (\n    <TestElement id=\"embedded__iframe\" title=\"IFrames\">\n      <iframe src=\"/\" height=\"300\" title=\"Index\" />\n    </TestElement>\n  );\n};\n\nexport default IFrame;\n","import React from 'react';\nimport TestSection from '../TestSection';\nimport Images from './Images';\nimport Audio from './Audio';\nimport Video from './Video';\nimport Canvas from './Canvas';\nimport Meter from './Meter';\nimport Progress from './Progress';\nimport InlineSVG from './InlineSVG';\nimport IFrame from './IFrame';\n\nconst Embedded = () => {\n  return (\n    <TestSection id=\"embedded\" title=\"Embedded Content\">\n      <Images />\n      <Audio />\n      <Video />\n      <Canvas />\n      <Meter />\n      <Progress />\n      <InlineSVG />\n      <IFrame />\n    </TestSection>\n  );\n};\n\nexport default Embedded;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport TestElement from '../TestElement';\n\nconst Fieldset = styled.fieldset`\n  border: 1px solid $textColor;\n`;\n\nconst Legend = styled.legend`\n  padding: 0.5rem;\n`;\n\nconst FormElement = ({ id, title, children }) => (\n  <TestElement id={id} title={title}>\n    <form>\n      <Fieldset>\n        <Legend>{title}</Legend>\n        {children}\n      </Fieldset>\n    </form>\n  </TestElement>\n);\n\nexport default FormElement;\n\nFormElement.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst InputFields = () => {\n  return (\n    <FormElement id=\"forms__input\" title=\"Input Fields\">\n      <p>\n        <label htmlFor=\"input__text\">\n          Text Input\n          <input id=\"input__text\" type=\"text\" placeholder=\"Text Input\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__password\">\n          Password\n          <input id=\"input__password\" type=\"password\" placeholder=\"Type your Password\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__webaddress\">\n          Web Address\n          <input id=\"input__webaddress\" type=\"url\" placeholder=\"https://yoursite.com\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__emailaddress\">\n          Email Address\n          <input id=\"input__emailaddress\" type=\"email\" placeholder=\"name@email.com\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__phone\">\n          Phone Number\n          <input id=\"input__phone\" type=\"tel\" placeholder=\"(999) 999-9999\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__search\">\n          Search\n          <input id=\"input__search\" type=\"search\" placeholder=\"Enter Search Term\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__text2\">\n          Number Input\n          <input id=\"input__text2\" type=\"number\" placeholder=\"Enter a Number\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__text3\">\n          Error\n          <input id=\"input__text3\" type=\"text\" placeholder=\"Text Input\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"input__text4\">\n          Valid\n          <input id=\"input__text4\" type=\"text\" placeholder=\"Text Input\" />\n        </label>\n      </p>\n    </FormElement>\n  );\n};\n\nexport default InputFields;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst SelectMenu = () => {\n  return (\n    <FormElement id=\"forms__select\" title=\"Select Menu\">\n      <p>\n        <label htmlFor=\"select\">\n          Select\n          <select id=\"select\">\n            <optgroup label=\"Option Group\">\n              <option>Option One</option>\n              <option>Option Two</option>\n              <option>Option Three</option>\n            </optgroup>\n          </select>\n        </label>\n      </p>\n    </FormElement>\n  );\n};\n\nexport default SelectMenu;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst Checkboxes = () => {\n  return (\n    <FormElement id=\"forms__checkbox\" title=\"Checkboxes\">\n      <ul>\n        <li>\n          <label htmlFor=\"checkbox1\">\n            <input id=\"checkbox1\" name=\"checkbox\" type=\"checkbox\" defaultChecked /> Choice A\n          </label>\n        </li>\n        <li>\n          <label htmlFor=\"checkbox2\">\n            <input id=\"checkbox2\" name=\"checkbox\" type=\"checkbox\" /> Choice B\n          </label>\n        </li>\n        <li>\n          <label htmlFor=\"checkbox3\">\n            <input id=\"checkbox3\" name=\"checkbox\" type=\"checkbox\" /> Choice C\n          </label>\n        </li>\n      </ul>\n    </FormElement>\n  );\n};\n\nexport default Checkboxes;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst RadioButtons = () => {\n  return (\n    <FormElement id=\"forms__radio\" title=\"Radio Button\">\n      <ul>\n        <li>\n          <label htmlFor=\"radio1\">\n            <input id=\"radio1\" name=\"radio\" type=\"radio\" defaultChecked /> Option 1\n          </label>\n        </li>\n        <li>\n          <label htmlFor=\"radio2\">\n            <input id=\"radio2\" name=\"radio\" type=\"radio\" /> Option 2\n          </label>\n        </li>\n        <li>\n          <label htmlFor=\"radio3\">\n            <input id=\"radio3\" name=\"radio\" type=\"radio\" /> Option 3\n          </label>\n        </li>\n      </ul>\n    </FormElement>\n  );\n};\n\nexport default RadioButtons;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst TextArea = () => {\n  return (\n    <FormElement id=\"forms__textarea\" title=\"TextArea\">\n      <p>\n        <label htmlFor=\"textarea\">\n          Textarea\n          <textarea id=\"textarea\" rows=\"8\" cols=\"48\" placeholder=\"Enter your message here\" />\n        </label>\n      </p>\n    </FormElement>\n  );\n};\n\nexport default TextArea;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst HTML5Inputs = () => {\n  return (\n    <FormElement id=\"forms__html5\" title=\"HTML5 Inputs\">\n      <p>\n        <label htmlFor=\"ic\">\n          Color input\n          <input type=\"color\" id=\"ic\" defaultValue=\"#ff0000\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"in\">\n          Number input\n          <input type=\"number\" id=\"in\" min=\"0\" max=\"10\" defaultValue=\"5\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"ir\">\n          Range input\n          <input type=\"range\" id=\"ir\" defaultValue=\"10\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"idd\">\n          Date input\n          <input type=\"date\" id=\"idd\" defaultValue=\"1970-01-01\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"idm\">\n          Month input\n          <input type=\"month\" id=\"idm\" defaultValue=\"1970-01\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"idw\">\n          Week input\n          <input type=\"week\" id=\"idw\" defaultValue=\"1970-W01\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"idt\">\n          Datetime input\n          <input type=\"datetime\" id=\"idt\" defaultValue=\"1970-01-01T00:00:00Z\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"idtl\">\n          Datetime-local input\n          <input type=\"datetime-local\" id=\"idtl\" defaultValue=\"1970-01-01T00:00\" />\n        </label>\n      </p>\n    </FormElement>\n  );\n};\n\nexport default HTML5Inputs;\n","import React from 'react';\nimport FormElement from './FormElement';\n\nconst ActionButtons = () => {\n  return (\n    <FormElement id=\"forms__action\" title=\"Action Buttons\">\n      <p>\n        <input type=\"submit\" value=\"<input type=submit>\" />\n        <input type=\"button\" value=\"<input type=button>\" />\n        <input type=\"reset\" value=\"<input type=reset>\" />\n        <input type=\"submit\" value=\"<input disabled>\" disabled />\n      </p>\n      <p>\n        <button type=\"submit\">&lt;button type=submit&gt;</button>\n        <button type=\"button\">&lt;button type=button&gt;</button>\n        <button type=\"reset\">&lt;button type=reset&gt;</button>\n        <button type=\"button\" disabled>\n          &lt;button disabled&gt;\n        </button>\n      </p>\n    </FormElement>\n  );\n};\n\nexport default ActionButtons;\n","import React from 'react';\nimport TestSection from '../TestSection';\nimport InputFields from './InputFields';\nimport SelectMenu from './SelectMenu';\nimport Checkboxes from './Checkboxes';\nimport RadioButtons from './RadioButtons';\nimport TextArea from './TextArea';\nimport HTML5Inputs from './HTML5Inputs';\nimport ActionButtons from './ActionButtons';\n\nconst Embedded = () => {\n  return (\n    <TestSection id=\"forms\" title=\"Form Elements\">\n      <InputFields />\n      <SelectMenu />\n      <Checkboxes />\n      <RadioButtons />\n      <TextArea />\n      <HTML5Inputs />\n      <ActionButtons />\n    </TestSection>\n  );\n};\n\nexport default Embedded;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Layout from '../components/Layout';\nimport Link from '../components/Link';\nimport TableOfContents from '../components/TestElements/TableOfContents';\nimport Text from '../components/TestElements/Elements/Text';\nimport Embedded from '../components/TestElements/Elements/Embedded';\nimport Form from '../components/TestElements/Elements/Form';\n\nconst PageHeadline = styled.h1`\n  color: #fff;\n`;\n\nconst IndexPage = () => {\n  return (\n    <Layout>\n      <header role=\"banner\">\n        <PageHeadline>Content Test Page</PageHeadline>\n        <p>\n          This is a test page filled with common HTML elements wrapped in React components… but\n          rather than be used to build CSS styles, these elements are just fodder for\n          demonstrational purposes.\n        </p>\n      </header>\n      <TableOfContents />\n      <main role=\"main\">\n        <Text />\n        <Embedded />\n        <Form />\n      </main>\n      <footer role=\"contentinfo\">\n        <p>\n          Modified by <Link to=\"https://github.com/mikedpad\">Michael Daniel Padilla</Link>.\n        </p>\n        <p>\n          Forked from{` `}\n          <Link to=\"https://github.com/cbracco/html5-test-page\">HTML5 Test Page</Link>.\n        </p>\n      </footer>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}